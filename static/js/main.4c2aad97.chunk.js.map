{"version":3,"sources":["components/Footer.js","components/Nav.js","pages/Article/Article.js","pages/Home/SearchBox.js","pages/Home/Result.js","pages/Home/ResultList.js","pages/Home/Home.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["Footer","darkMode","useDarkMode","react_default","a","createElement","className","onClick","document","querySelector","scrollIntoView","behavior","dist","toggle","Nav","Link","to","Component","Article","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","image","title","sidebar","React","createRef","text","article","match","params","getData","prevProps","location","current","innerHTML","setState","query","replace","loadingTimeout","setTimeout","_this2","wiki","apiUrl","page","then","console","log","mainImage","html","clearTimeout","processHtml","catch","err","String","_this3","el","DOMParser","parseFromString","querySelectorAll","forEach","getAttribute","addEventListener","evt","preventDefault","test","history","push","charAt","window","open","focus","elementsWithStyle","styleRegex","element","style","setAttribute","images","remove","removeAttribute","amountRemoved","appendChild","content","Nav_Nav","src","alt","ref","withRouter","Search","updateQuery","bind","assertThisInitialized","searchbox","target","value","onChange","expanded","type","placeholder","autoFocus","Result","result","key","ResultList","results","message","totalResults","id","keys","length","map","Result_Result","Home","handleSearchUpdate","doQuery","search","res","_ref","asyncToGenerator","regenerator_default","mark","_callee","_results","wrap","_context","prev","next","sent","summary","stop","_x2","apply","arguments","_loop","SearchBox_Search","ResultList_ResultList","Routes","BrowserRouter","Switch","Route","path","component","components_Footer","App","src_Routes","Boolean","hostname","ReactDOM","render","App_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4c2aad97.chunk.js","sourcesContent":["import React from 'react'\nimport { Moon, ArrowUp } from 'react-feather'\nimport useDarkMode from 'use-dark-mode';\n\nconst Footer = () => {\n    const darkMode = useDarkMode(false);\n\n    const scrollToTop = () => {\n        document.querySelector('nav').scrollIntoView({\n            behavior: 'smooth'\n        });\n    }\n\n    return (\n        <div className=\"footer fixed w-screen flex items-center justify-between flex-wrap p-6\">\n            \n            <div>\n                {/* Darkmode toggle button */}\n                <button onClick={scrollToTop} className=\"outline-none pb-5\">\n                    <ArrowUp className=\"whiteInDarkMode\" />\n                </button><br />\n                {/* Darkmode toggle button */}\n                <button onClick={darkMode.toggle} className=\"outline-none\">\n                    <Moon className=\"whiteInDarkMode\" />\n                </button>\n            </div>\n            <div />\n        </div>\n    )\n}\nexport default Footer;","/**\n * Navbar used on article pages\n */\nimport React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\n\nexport default class Nav extends Component {\n    render() {\n        return (\n            <nav className=\"header flex items-center justify-between flex-wrap p-6 w-full\">\n                <div />\n                <Link to=\"/\" className=\"no-underline\">\n                    <span className=\"font-light\">minimal</span><span className=\"font-normal\">pedia</span>\n                </Link>\n                <div />\n            </nav>\n        )\n    }\n}","/**\n * Individual article page\n */\nimport React, { Component } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport Nav from '../../components/Nav'\n\nimport wiki from 'wikijs'\nimport './article.css'\n\nclass Article extends Component {\n  state = {\n    image: '', // Main article image\n    title: '' // Article title\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.sidebar = React.createRef();\n    this.text = React.createRef();\n  }\n\n  // Load article data on mount\n  componentDidMount() {\n      let article = this.props.match.params.article;\n      this.getData(article);\n  }\n\n  // Load article data on location update\n  componentDidUpdate(prevProps) {\n    const locationChanged = this.props.location !== prevProps.location;\n\n    if (locationChanged) {\n      // Reset page content\n      this.sidebar.current.innerHTML = '';\n      this.text.current.innerHTML = 'Getting your article from Wikipedia...';\n      this.setState({\n          image: ''\n      });\n\n      let article = this.props.match.params.article;\n      this.getData(article);\n    }\n  }\n\n  // Get article data from wikipedia API\n  async getData(query) {\n    // Set article title to query\n    this.setState({\n        title: query\n    });\n    // Replace document title with article title\n    document.title = query.replace(/_/g, ' ') + ' - minimalpedia';\n\n    // Set timeout to update loading message after 10 seconds if still loading\n    let loadingTimeout = setTimeout(() => {\n      this.text.current.innerHTML = 'Still loading the article from Wikipedia...';\n    }, 10000);\n\n    // Get information using wikipedia API\n    wiki({ apiUrl: 'https://en.wikipedia.org/w/api.php' }).page(query).then((page) => {\n      console.log(page)\n        // Get image\n        page.mainImage().then(image => {\n          this.setState({\n            image\n          });\n        })\n\n        // Get and process HTML\n        page.html().then(html => {\n          clearTimeout(loadingTimeout);\n          this.processHtml(html);\n        })\n    }).catch(err => {\n      clearTimeout(loadingTimeout);\n\n      // Replace common errors with custom error messages\n      if (String(err) === \"Error: No article found\") {\n        err = 'Sorry, but we couldn\\'t find this article on Wikipedia'\n      }\n\n      // Display error\n      this.text.current.innerHTML = err;\n    });\n  }\n\n  // Process HTML from wikipedia for use on the page\n  processHtml(html) {\n    // Parse HTML\n    let parser = new DOMParser();\n    let el = parser.parseFromString('<div>' + html + '</div>', 'text/html');\n\n    // Replace links\n    el.querySelectorAll('a').forEach(a => {\n      let to = a.getAttribute('href');\n\n      a.addEventListener('click', evt => {\n        evt.preventDefault();\n\n        // Is link to another article? Open link with react-router\n        if (/^\\/wiki\\/.*/.test(to)) {\n          // Open Wiki article\n          this.props.history.push(to);\n\n        // Is link to anchor? Scroll to anchor smoothly\n        } else if (to.charAt(0) === '#') {\n          document.querySelector(to).scrollIntoView({\n            behavior: 'smooth'\n          });\n\n        // Else it is an external link - open the link in a new tab\n        } else {\n          var newTab = window.open(to, '_blank');\n          newTab.focus();\n        }\n      });\n    });\n\n    // Remove specific style attributes\n    let elementsWithStyle = el.querySelectorAll('[style]:not([style=\"\"]');\n    if (elementsWithStyle) {\n      // This regex will be selecting the following CSS styles and their values:\n      // - background\n      // - background-color\n      // - border\n      // - border-*\n      // - color\n      let styleRegex = /(background(-color)?|border(-[^:]*)?|color):.*?(;|$)/gi;\n      elementsWithStyle.forEach(element => {\n        let style = element.getAttribute('style');\n\n        // Remove attributes stated above from the element style\n        style = style.replace(styleRegex, '');\n\n        element.setAttribute('style', style);\n      });\n    }\n\n    /////// PROCESS SIDEBAR ///////\n    // Extract sidebar\n    let sidebar = el.querySelectorAll('table.infobox')[0];\n\n    // Only process sidebar if a sidebar exists\n    if (sidebar) {\n      // Remove images from sidebar\n      let images = sidebar.querySelectorAll('.image');\n      if (images) {\n        images.forEach(element => {\n          element.remove()\n        });\n      }\n\n\n      // Remove wikipedia styles from sidebar table\n      sidebar.removeAttribute('style');\n      let elementsWithStyle = sidebar.querySelectorAll('[style]:not([style=\"\"]');\n      if (elementsWithStyle) {\n        elementsWithStyle.forEach(element => {\n          element.removeAttribute('style')\n        });\n      }\n\n      // Remove first two lines of table as they are simply the article title\n      let amountRemoved = 0;\n      sidebar.querySelectorAll('tr').forEach(element => {\n        if (amountRemoved < 2) {\n          element.remove();\n        } else {\n          return false;\n        }\n        amountRemoved++;\n      });\n\n      // Insert sidebar into page\n      this.sidebar.current.innerHTML = '';\n      this.sidebar.current.appendChild(sidebar);\n    }\n\n    /////// PROCESS MAIN CONTENT ///////\n    let content = el.querySelectorAll('div')[0];\n\n    // Remove sidebar\n    // content.querySelectorAll('table.infobox')[0].remove();\n\n    // Remove edit links\n    content.querySelectorAll('.mw-editsection').forEach(el => {\n      el.remove()\n    });\n\n    // Insert main content into page\n    this.text.current.innerHTML = '';\n    this.text.current.appendChild(content);\n  }\n\n render() {\n   return (\n     <div>\n      <Nav />\n\n      <div className=\"md:flex md:min-h-screen article\">\n        {/* Sidebar */}\n        <div className=\"w-screen md:w-1/3 pl-16 p-6 sidebar\">\n          <img className=\"w-100\" src={this.state.image} alt=\"\" />\n          <div className=\"sidebar-table\" ref={ this.sidebar } />\n        </div>\n\n        {/* Main content */}\n        <div className=\"w-screen md:w-2/3 pl-16 md:pl-6 p-6 info\">\n          <h2>{ this.state.title.replace(/_/g, ' ') }</h2>\n          <div ref={ this.text }>Getting your article from Wikipedia...</div>\n        </div>\n        \n      </div>\n     </div>\n   );\n }\n}\nexport default withRouter(Article);","import React, { Component } from 'react'\n\nexport default class Search extends Component {\n    state = {\n        query: '' // Current search query\n    }\n\n    constructor(props) {\n        super(props);\n  \n        this.updateQuery = this.updateQuery.bind(this);\n        this.searchbox = React.createRef();\n    }\n\n    // Update search query\n    updateQuery(evt) {\n        this.setState({\n            query: evt.target.value\n        });\n        this.props.onChange(evt.target.value);\n    }\n\n    // Focus searchbox when component mounts\n    componentDidMount() {\n        this.searchbox.current.focus();\n    }\n\n    render() {\n        return (\n            <div>\n                <div className={ \"head px-16 \" + (this.props.expanded ? 'pt-32' : 'pt-10') }>\n                    {/* Heading */}\n                    <div className=\"heading text-center text-2xl\">\n                        <span className=\"font-light\">minimal</span><span className=\"font-normal\">pedia</span>\n                    </div>\n\n                    {/* Searchbox */}\n                    <div className={ \"search \" + (this.props.expanded ? 'pt-32' : '') }>\n                        <input \n                            type=\"text\" \n                            className=\"search-box h-48 w-full outline-none text-5xl font-bold bg-transparent\" \n                            placeholder=\"Search...\" \n                            value={ this.state.query } \n                            onChange={ this.updateQuery } \n                            ref={ this.searchbox }\n                            autoFocus />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","/**\n * Single search result\n */\nimport React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\n\nexport default class Result extends Component {\n    render() {\n        const result = this.props.result;\n\n        return (\n            <div key={result.title}>\n                <Link to={\"/wiki/\" + result.title} className=\"result overflow-hidden h-48 p-4 flex mb-12 no-underline color-inherit\">\n                        <div className=\"result-img-container\">\n                            <img className=\"result-img h-32 pr-12\" src={result.image} alt=\"\" />\n                        </div>\n                        <div className=\"result-text-container\">\n                            <h2>{result.title}</h2>\n                            <p className=\"text-grey text-xs leading-loose\">{result.text}</p>\n                        </div>\n                </Link>\n            </div>\n        )\n    }\n}","/**\n * List of search results\n */\nimport React, { Component } from 'react'\nimport Result from './Result'\n\nexport default class ResultList extends Component {\n    render() {\n        const results = this.props.results;\n\n        // Set message returned if there are no results (yet)\n        let message = 'Let me ask Wikipedia for that...'\n        if (this.props.totalResults === 0) {\n            message = 'I could not find any results';\n        }\n\n        return (\n            <div className=\"results px-16 mt-3 display-none\" id=\"results\">\n                {\n                    // Show results if found, otherwise display message\n                    Object.keys(results).length > 0 ? Object.keys(results).map(result => (\n                        <Result key={results[result].title} result={results[result]} />\n                    )) : (\n                        <div className=\"result overflow-hidden h-48 p-4 flex mb-12 no-underline color-inherit\">\n                            <div className=\"w-100\">\n                                <h2 className=\"font-light\">\n                                    {message}\n                                </h2>\n                            </div>\n                        </div>\n                    )\n                }\n            </div>\n        )\n    }\n}","/**\n * Homepage/Search page\n */\nimport React, { Component } from 'react'\n\nimport SearchBox from './SearchBox'\nimport ResultList from './ResultList'\nimport wiki from 'wikijs'\n\nimport './home.css'\n\nexport default class Home extends Component {\n  state = {\n    query: '', // Current search query\n    results: {}, // Current search results\n    totalResults: 10 // Number of results found\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.handleSearchUpdate = this.handleSearchUpdate.bind(this);\n  }\n\n  componentDidMount() {\n    // Update title. This will reset any title set by the article pages\n    document.title = 'minimalpedia';\n  }\n\n  // Handle update of search query\n  handleSearchUpdate(query) {\n    this.setState({\n      query\n    });\n    this.doQuery(query)\n  }\n\n  // Query Wikipedia for search query\n  async doQuery(query) {\n    // Reset number of results\n    this.setState({\n      totalResults: 10\n    })\n\n    // Get query results\n    let results = (await wiki({ apiUrl: 'https://en.wikipedia.org/w/api.php' }).search(query)).results;\n\n    // Show general information\n    if (query === this.state.query) {\n      this.setState({\n        results: {},\n        totalResults: results.length\n      })\n\n      // Add first 10 results to results list\n      for (let key = 0; key < 10 && key < results.length; key++) {\n        let res = this.state.results;\n        res[key] = {\n          title: results[key],\n          image: '',\n          text: 'Loading details...'\n        };\n\n        this.setState({\n          results: res\n        })\n      }\n    } else {\n      // We are not the current search query anymore: Abort\n      return;\n    }\n\n    // Query for details on the first 10 results\n    for (let key = 0; key < 10 && key < results.length; key++) {\n      wiki({ apiUrl: 'https://en.wikipedia.org/w/api.php' }).page(results[key]).then(async (page) => {\n        // Get image and summary\n        let image = await page.mainImage()\n        let text = await page.summary()\n\n        let result = {\n          title: results[key],\n          image,\n          text\n        }\n\n        // Check if we are still the active query, otherwise don't update details\n        if (query === this.state.query) {\n          let results = this.state.results;\n          results[key] = result;\n\n          this.setState({\n            results\n          })\n        }\n      });\n    }\n  }\n\n render() {\n   return (\n     <div>\n       <SearchBox expanded={ this.state.query === '' } onChange={ this.handleSearchUpdate } />\n       { this.state.query !== '' && (<ResultList results={ this.state.results } totalResults={this.state.totalResults} />) }\n     </div>\n   );\n }\n}","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport Footer from './components/Footer'\n\nimport Article from './pages/Article/Article';\nimport Home from './pages/Home/Home';\n\nconst Routes = (props) => (\n  <Router {...props}>\n    <div>\n      <Switch>\n        <Route path=\"/wiki/:article\" component={Article} />\n        <Route path=\"/\" component={Home} />\n      </Switch>\n      <Footer />\n    </div>\n  </Router>\n);\nexport default Routes;","import React, { Component } from 'react'\nimport Routes from './Routes'\n\n// Fonts\nimport 'typeface-open-sans';\nimport 'typeface-merriweather';\n\n// Styles\nimport './styles/tailwind.css'\nimport './styles/style.css'\n\nexport default class App extends Component {\n  render() {\n    return <Routes />\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}