{"version":3,"sources":["components/Footer.js","components/Nav.js","pages/Article/Article.js","pages/Home/SearchBox.js","pages/Home/Result.js","pages/Home/ResultList.js","pages/Home/Home.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["Footer","darkMode","useDarkMode","react_default","a","createElement","className","onClick","toggle","dist","Nav","Link","to","Component","Article","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","image","title","sidebar","React","createRef","text","article","match","params","getData","prevProps","location","current","innerHTML","setState","query","document","replace","wiki","apiUrl","page","then","mainImage","_this2","html","processHtml","_this3","el","DOMParser","parseFromString","querySelectorAll","forEach","getAttribute","addEventListener","evt","test","preventDefault","history","push","charAt","querySelector","scrollIntoView","behavior","element","remove","removeAttribute","amountRemoved","appendChild","content","Nav_Nav","src","alt","ref","withRouter","Search","updateQuery","bind","assertThisInitialized","searchbox","target","value","onChange","focus","expanded","type","placeholder","autoFocus","Result","result","key","ResultList","results","message","totalResults","id","keys","length","map","Result_Result","Home","handleSearchUpdate","doQuery","search","res","_ref","asyncToGenerator","regenerator_default","mark","_callee","_results","wrap","_context","prev","next","sent","summary","stop","_x2","apply","arguments","_loop","SearchBox_Search","ResultList_ResultList","Routes","BrowserRouter","Switch","Route","path","component","components_Footer","App","src_Routes","Boolean","window","hostname","ReactDOM","render","App_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.da79b56d.chunk.js","sourcesContent":["import React from 'react'\nimport { Moon } from 'react-feather'\nimport useDarkMode from 'use-dark-mode';\n\nconst Footer = () => {\n    const darkMode = useDarkMode(false);\n\n    return (\n        <div className=\"footer fixed w-screen flex items-center justify-between flex-wrap p-6\">\n            {/* Darkmode toggle button */}\n            <button onClick={darkMode.toggle}>\n                <Moon className=\"whiteInDarkMode\" />\n            </button>\n            <div />\n        </div>\n    )\n}\nexport default Footer;","/**\n * Navbar used on article pages\n */\nimport React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\n\nexport default class Nav extends Component {\n    render() {\n        return (\n            <nav className=\"header flex items-center justify-between flex-wrap p-6\">\n                <div />\n                <Link to=\"/\" className=\"no-underline\">\n                    <span className=\"font-light\">minimal</span><span className=\"font-normal\">pedia</span>\n                </Link>\n                <div />\n            </nav>\n        )\n    }\n}","/**\n * Individual article page\n */\nimport React, { Component } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport Nav from '../../components/Nav'\n\nimport wiki from 'wikijs'\nimport './article.css'\n\nclass Article extends Component {\n  state = {\n    image: '', // Main article image\n    title: '' // Article title\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.sidebar = React.createRef();\n    this.text = React.createRef();\n  }\n\n  // Load article data on mount\n  componentDidMount() {\n      let article = this.props.match.params.article;\n      this.getData(article);\n  }\n\n  // Load article data on location update\n  componentDidUpdate(prevProps) {\n    const locationChanged = this.props.location !== prevProps.location;\n\n    if (locationChanged) {\n      // Reset page content\n      this.sidebar.current.innerHTML = '';\n      this.text.current.innerHTML = 'Getting your article from Wikipedia...';\n      this.setState({\n          image: ''\n      });\n\n      let article = this.props.match.params.article;\n      this.getData(article);\n    }\n  }\n\n  // Get article data from wikipedia API\n  async getData(query) {\n    // Set article title to query\n    this.setState({\n        title: query\n    });\n    // Replace document title with article title\n    document.title = query.replace(/_/g, ' ') + ' - minimalpedia';\n\n    // Get information using wikipedia API\n    wiki({ apiUrl: 'https://en.wikipedia.org/w/api.php' }).page(query).then((page) => {\n        // Get image\n        page.mainImage().then(image => {\n          this.setState({\n            image\n          });\n        })\n\n        // Get and process HTML\n        page.html().then(html => {\n          this.processHtml(html);\n        })\n    });\n  }\n\n  // Process HTML from wikipedia for use on the page\n  processHtml(html) {\n    // Parse HTML\n    let parser = new DOMParser();\n    let el = parser.parseFromString('<div>' + html + '</div>', 'text/html');\n\n    // Replace links\n    el.querySelectorAll('a').forEach(a => {\n      let to = a.getAttribute('href');\n\n      a.addEventListener('click', evt => {\n        // Is link to another article? Open link with react-router\n        if (/^\\/wiki\\/.*/.test(to)) {\n          // Open Wiki article\n          evt.preventDefault();\n          this.props.history.push(to);\n\n        // Is link to anchor? Scroll to anchor smoothly\n        } else if (to.charAt(0) === '#') {\n          evt.preventDefault();\n          document.querySelector(to).scrollIntoView({\n            behavior: 'smooth'\n          });\n        }\n\n        // Else it is an external link - don't do anything, simply open the link\n      });\n    });\n\n    /////// PROCESS SIDEBAR ///////\n    // Extract sidebar\n    let sidebar = el.querySelectorAll('table.infobox')[0];\n\n    // Remove images from sidebar\n    sidebar.querySelectorAll('.image').forEach(element => {\n      element.remove()\n    });\n\n    // Remove wikipedia styles from sidebar table\n    sidebar.removeAttribute('style');\n    sidebar.querySelectorAll('[style]:not([style=\"\"]').forEach(element => {\n      element.removeAttribute('style')\n    });\n\n    // Remove first two lines of table as they are simply the article title\n    let amountRemoved = 0;\n    sidebar.querySelectorAll('tr').forEach(element => {\n      if (amountRemoved < 2) {\n        element.remove();\n      } else {\n        return false;\n      }\n      amountRemoved++;\n    });\n\n    // Insert sidebar into page\n    this.sidebar.current.innerHTML = '';\n    this.sidebar.current.appendChild(sidebar);\n\n    /////// PROCESS MAIN CONTENT ///////\n    let content = el.querySelectorAll('div')[0];\n\n    // Remove sidebar\n    // content.querySelectorAll('table.infobox')[0].remove();\n\n    // Remove edit links\n    content.querySelectorAll('.mw-editsection').forEach(el => {\n      el.remove()\n    });\n\n    // Insert main content into page\n    this.text.current.innerHTML = '';\n    this.text.current.appendChild(content);\n  }\n\n render() {\n   return (\n     <div>\n      <Nav />\n\n      <div className=\"md:flex md:min-h-screen article\">\n        {/* Sidebar */}\n        <div className=\"w-screen md:w-1/3 pl-16 p-6 sidebar\">\n          <img className=\"w-100\" src={this.state.image} alt=\"\" />\n          <div className=\"sidebar-table\" ref={ this.sidebar } />\n        </div>\n\n        {/* Main content */}\n        <div className=\"w-screen md:w-2/3 pl-16 md:pl-6 p-6 info\">\n          <h2>{ this.state.title.replace(/_/g, ' ') }</h2>\n          <div ref={ this.text }>Getting your article from Wikipedia...</div>\n        </div>\n        \n      </div>\n     </div>\n   );\n }\n}\nexport default withRouter(Article);","import React, { Component } from 'react'\n\nexport default class Search extends Component {\n    state = {\n        query: '' // Current search query\n    }\n\n    constructor(props) {\n        super(props);\n  \n        this.updateQuery = this.updateQuery.bind(this);\n        this.searchbox = React.createRef();\n    }\n\n    // Update search query\n    updateQuery(evt) {\n        this.setState({\n            query: evt.target.value\n        });\n        this.props.onChange(evt.target.value);\n    }\n\n    // Focus searchbox when component mounts\n    componentDidMount() {\n        this.searchbox.current.focus();\n    }\n\n    render() {\n        return (\n            <div>\n                <div className={ \"head px-16 \" + (this.props.expanded ? 'pt-32' : 'pt-10') }>\n                    {/* Heading */}\n                    <div className=\"heading text-center text-2xl\">\n                        <span className=\"font-light\">minimal</span><span className=\"font-normal\">pedia</span>\n                    </div>\n\n                    {/* Searchbox */}\n                    <div className={ \"search \" + (this.props.expanded ? 'pt-32' : '') }>\n                        <input \n                            type=\"text\" \n                            className=\"search-box h-48 w-100 text-5xl font-bold bg-transparent\" \n                            placeholder=\"Search...\" \n                            value={ this.state.query } \n                            onChange={ this.updateQuery } \n                            ref={ this.searchbox }\n                            autoFocus />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","/**\n * Single search result\n */\nimport React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\n\nexport default class Result extends Component {\n    render() {\n        const result = this.props.result;\n\n        return (\n            <div key={result.title}>\n                <Link to={\"/wiki/\" + result.title} className=\"result overflow-hidden h-48 p-4 flex mb-12 no-underline color-inherit\">\n                        <div className=\"result-img-container\">\n                            <img className=\"result-img h-32 pr-12\" src={result.image} alt=\"\" />\n                        </div>\n                        <div className=\"result-text-container\">\n                            <h2>{result.title}</h2>\n                            <p className=\"text-grey text-xs leading-loose\">{result.text}</p>\n                        </div>\n                </Link>\n            </div>\n        )\n    }\n}","/**\n * List of search results\n */\nimport React, { Component } from 'react'\nimport Result from './Result'\n\nexport default class ResultList extends Component {\n    render() {\n        const results = this.props.results;\n\n        // Set message returned if there are no results (yet)\n        let message = 'Let me ask Wikipedia for that...'\n        if (this.props.totalResults === 0) {\n            message = 'I could not find any results';\n        }\n\n        return (\n            <div className=\"results px-16 mt-3 display-none\" id=\"results\">\n                {\n                    // Show results if found, otherwise display message\n                    Object.keys(results).length > 0 ? Object.keys(results).map(result => (\n                        <Result key={results[result].title} result={results[result]} />\n                    )) : (\n                        <div className=\"result overflow-hidden h-48 p-4 flex mb-12 no-underline color-inherit\">\n                            <div className=\"w-100\">\n                                <h2 className=\"font-light\">\n                                    {message}\n                                </h2>\n                            </div>\n                        </div>\n                    )\n                }\n            </div>\n        )\n    }\n}","/**\n * Homepage/Search page\n */\nimport React, { Component } from 'react'\n\nimport SearchBox from './SearchBox'\nimport ResultList from './ResultList'\nimport wiki from 'wikijs'\n\nimport './home.css'\n\nexport default class Home extends Component {\n  state = {\n    query: '', // Current search query\n    results: {}, // Current search results\n    totalResults: 10 // Number of results found\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.handleSearchUpdate = this.handleSearchUpdate.bind(this);\n  }\n\n  componentDidMount() {\n    // Update title. This will reset any title set by the article pages\n    document.title = 'minimalpedia';\n  }\n\n  // Handle update of search query\n  handleSearchUpdate(query) {\n    this.setState({\n      query\n    });\n    this.doQuery(query)\n  }\n\n  // Query Wikipedia for search query\n  async doQuery(query) {\n    // Reset number of results\n    this.setState({\n      totalResults: 10\n    })\n\n    // Get query results\n    let results = (await wiki({ apiUrl: 'https://en.wikipedia.org/w/api.php' }).search(query)).results;\n\n    // Show general information\n    if (query === this.state.query) {\n      this.setState({\n        results: {},\n        totalResults: results.length\n      })\n\n      // Add first 10 results to results list\n      for (let key = 0; key < 10 && key < results.length; key++) {\n        let res = this.state.results;\n        res[key] = {\n          title: results[key],\n          image: '',\n          text: 'Loading details...'\n        };\n\n        this.setState({\n          results: res\n        })\n      }\n    } else {\n      // We are not the current search query anymore: Abort\n      return;\n    }\n\n    // Query for details on the first 10 results\n    for (let key = 0; key < 10 && key < results.length; key++) {\n      wiki({ apiUrl: 'https://en.wikipedia.org/w/api.php' }).page(results[key]).then(async (page) => {\n        // Get image and summary\n        let image = await page.mainImage()\n        let text = await page.summary()\n\n        let result = {\n          title: results[key],\n          image,\n          text\n        }\n\n        // Check if we are still the active query, otherwise don't update details\n        if (query === this.state.query) {\n          let results = this.state.results;\n          results[key] = result;\n\n          this.setState({\n            results\n          })\n        }\n      });\n    }\n  }\n\n render() {\n   return (\n     <div>\n       <SearchBox expanded={ this.state.query === '' } onChange={ this.handleSearchUpdate } />\n       { this.state.query !== '' && (<ResultList results={ this.state.results } totalResults={this.state.totalResults} />) }\n     </div>\n   );\n }\n}","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport Footer from './components/Footer'\n\nimport Article from './pages/Article/Article';\nimport Home from './pages/Home/Home';\n\nconst Routes = (props) => (\n  <Router {...props}>\n    <div>\n      <Switch>\n        <Route path=\"/wiki/:article\" component={Article} />\n        <Route path=\"/\" component={Home} />\n      </Switch>\n      <Footer />\n    </div>\n  </Router>\n);\nexport default Routes;","import React, { Component } from 'react'\nimport Routes from './Routes'\n\n// Fonts\nimport 'typeface-open-sans';\nimport 'typeface-merriweather';\n\n// Styles\nimport './styles/tailwind.css'\nimport './styles/style.css'\n\nexport default class App extends Component {\n  render() {\n    return <Routes />\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}